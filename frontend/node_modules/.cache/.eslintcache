[{"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\index.js":"1","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\context.js":"2","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\useToken.js":"3","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\usePages.js":"4","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\Login.js":"5","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\navigation\\Nav.js":"6","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\NoPage.js":"7","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\Logout.js":"8","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\CreateUser.js":"9","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\ActuallyLogin.js":"10","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\PlaylistCreate.js":"11","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\Library.js":"12","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\explore\\SearchUser.js":"13","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\explore\\NearMe.js":"14","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\SongplaceCreate.js":"15","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\Playlist.js":"16","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\ListedUser.js":"17","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\ListedPlaylist.js":"18","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\ListedSongplace.js":"19","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\EditPlaylist.js":"20"},{"size":2029,"mtime":1656608882883,"results":"21","hashOfConfig":"22"},{"size":90,"mtime":1656258486411,"results":"23","hashOfConfig":"22"},{"size":686,"mtime":1656258486418,"results":"24","hashOfConfig":"22"},{"size":2933,"mtime":1656377245406,"results":"25","hashOfConfig":"22"},{"size":1187,"mtime":1656258486415,"results":"26","hashOfConfig":"22"},{"size":3067,"mtime":1656338979813,"results":"27","hashOfConfig":"22"},{"size":427,"mtime":1656609685045,"results":"28","hashOfConfig":"22"},{"size":472,"mtime":1656258486415,"results":"29","hashOfConfig":"22"},{"size":2157,"mtime":1656258486415,"results":"30","hashOfConfig":"22"},{"size":2195,"mtime":1656258486414,"results":"31","hashOfConfig":"22"},{"size":1719,"mtime":1656258486417,"results":"32","hashOfConfig":"22"},{"size":2815,"mtime":1656377009312,"results":"33","hashOfConfig":"22"},{"size":1902,"mtime":1656258486414,"results":"34","hashOfConfig":"22"},{"size":7372,"mtime":1656505404638,"results":"35","hashOfConfig":"22"},{"size":3594,"mtime":1656360388957,"results":"36","hashOfConfig":"22"},{"size":5082,"mtime":1656374061614,"results":"37","hashOfConfig":"22"},{"size":1212,"mtime":1656376622982,"results":"38","hashOfConfig":"22"},{"size":1185,"mtime":1656533235623,"results":"39","hashOfConfig":"22"},{"size":1481,"mtime":1656369106442,"results":"40","hashOfConfig":"22"},{"size":1843,"mtime":1656258486409,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hm4yud",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"48"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"48"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\index.js",["115"],["116"],"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\context.js",[],[],[],"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\useToken.js",[],[],"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\usePages.js",["117"],[],"import Library from './library/Library';\r\nimport PlaylistCreate from './library/PlaylistCreate';\r\nimport Playlist from './library/Playlist';\r\nimport SongPlaceCreate from './library/SongplaceCreate';\r\nimport Logout from './handleUser/Logout';\r\nimport SearchUser from './explore/SearchUser';\r\nimport NoPage from './NoPage';\r\nimport Nav from '../components/navigation/Nav';\r\n\r\nimport { useState } from 'react';\r\nimport NearMe from './explore/NearMe';\r\n\r\n\r\n/**\r\n * Knows urls and associated elements.\r\n * Has functionality to get name (to display in navbar for example) for a route, \r\n * URL or URLSearchParams for route.  \r\n *  \r\n */\r\nexport default function usePages() {\r\n\r\n    const urlBeginning = 'http://localhost:3000';\r\n\r\n    const pages = {\r\n        navbar: {\r\n            path: 'all', //indicator to display element on all routes\r\n            element: <Nav/>\r\n        },\r\n        library: {\r\n            path: '/library',\r\n            name: 'Library',\r\n            element: <Library/>\r\n        },\r\n        searchedLibrary: {\r\n            path: '/search/library',\r\n            name: 'Search',\r\n            element: <Library/>\r\n        },\r\n        addsongplace: {\r\n            path: '/library/add-songplace',\r\n            name: 'Add a songplace', \r\n            element: <SongPlaceCreate/>\r\n        }, \r\n        addplaylist: {\r\n            path: '/library/add-playlist',  \r\n            name: 'Add a playlist', \r\n            element: <PlaylistCreate/>\r\n        }, \r\n        playlist: {\r\n            path: '/library/playlist',\r\n            name: 'Library', \r\n            element: <Playlist/>\r\n        },\r\n        searchedPlaylist: {\r\n            path: '/search/playlist',\r\n            name: 'Search', \r\n            element: <Playlist/>\r\n        },\r\n        logout: {\r\n            path: '/logout-user', \r\n            name: 'Logout', \r\n            element: <Logout/>\r\n        },\r\n        nearme: {\r\n            path: '/near-me', \r\n            name: 'Near me', \r\n            element: <NearMe/>\r\n        },\r\n        searchUser: {\r\n            path: '/search-user', \r\n            name: 'Search', \r\n            element: <SearchUser/>\r\n        },\r\n        notfound: {\r\n            name: 'Page not found', \r\n            element: <NoPage/>\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @param page amongst the pages\r\n     * @returns url associated to page\r\n     */\r\n    const getURL = (page) => {\r\n        return new URL(urlBeginning + page.path);\r\n    }\r\n\r\n\r\n    /**\r\n     * Return name for current location\r\n     * \r\n     * @param pathName last part of location, like for example: '/library' \r\n     */\r\n    const getName = (pathName) => {\r\n        for (var key in pages) {\r\n            if (pages[key].path === pathName) {\r\n                return pages[key].name;\r\n            }\r\n        }\r\n\r\n        console.log(\"could not associated name for path: \" + pathName);\r\n    }\r\n\r\n    return {\r\n        pages, \r\n        getURL, \r\n        getName\r\n    }\r\n}","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\Login.js",[],[],"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\navigation\\Nav.js",["118","119"],[],"import './Nav.css';\r\nimport '../../globals/Globals.css';\r\nimport { React, useState, useContext} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faArrowLeft, faClose } from '@fortawesome/free-solid-svg-icons';\r\nimport usePages from '../../pages/usePages';\r\nimport { UserContext } from '../../context';\r\n\r\n/**\r\n * Nav bar for app. Shows sidebar on click from < 2 steps in, else \r\n * goes one step back. \r\n */\r\nconst Nav = (props) => {\r\n\r\n    //name for and links to pages\r\n    const pagesHelp = usePages();\r\n    const pages = pagesHelp.pages;\r\n\r\n    const context = useContext(UserContext);\r\n    const currUserId = context.userId;\r\n\r\n    //library url with user-id param\r\n    let libraryUrl = pagesHelp.getURL(pages.library);\r\n    libraryUrl.searchParams.set('user-id', currUserId);\r\n\r\n    const getDepth = () => {\r\n        return window.location.href.split(\"/\").length - 2;\r\n    } \r\n\r\n    const getPageTitle = () => {\r\n        return pagesHelp.getName(window.location.pathname);\r\n    }\r\n\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const [depth, setDepth] = useState(getDepth());\r\n    const [pageTitle, setPageTitle] = useState(getPageTitle());\r\n\r\n   \r\n    const toggle = () => {\r\n        if (depth > 2) {\r\n            window.history.go(-1);\r\n            setMenuOpen(false);\r\n        }  else {\r\n            setMenuOpen(!menuOpen);\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className='nav-bar'>\r\n            <h2 className='page-title'>{pageTitle}</h2>\r\n            <button onClick={toggle} className='nav-btn' type='button'>\r\n\r\n                {/*Back button if over 2 clicks in app, else menu/close-button*/}\r\n                { getDepth() > 2 ? \r\n                            <FontAwesomeIcon icon={faArrowLeft} size='2x' className='icon nav-btn'/>\r\n                        :\r\n                        menuOpen ? \r\n                                <FontAwesomeIcon icon={faClose} size='2x' className='icon nav-btn'/>\r\n                            :\r\n                                <FontAwesomeIcon icon={faBars} size='2x' className='icon nav-btn'/>\r\n                }    \r\n            </button>\r\n            \r\n            {(menuOpen) ?\r\n                    <div className='side-menu'> \r\n                        <ul>\r\n                            <li>\r\n                                <a href={libraryUrl}>Library</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={pagesHelp.getURL(pages.nearme)}>Near me</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={pagesHelp.getURL(pages.searchUser)}>Search</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={pagesHelp.getURL(pages.logout)}>Logout</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                :\r\n                    <></>\r\n            }\r\n        </div>      \r\n    );\r\n}\r\n\r\nexport default Nav;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\NoPage.js",["120","121","122"],[],"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\Logout.js",["123"],[],"import Globals from '../../globals/Globals.css'\r\n\r\n\r\nconst Logout = () => {\r\n\r\n\r\n    const logout = () => {\r\n        localStorage.clear();\r\n        goBack();\r\n    }\r\n\r\n    const goBack = () => {\r\n        window.history.go(-1);\r\n    }\r\n\r\n    return (\r\n        <div className='margin-top'>\r\n            <h2>Log out?</h2>\r\n            <button onClick={logout}>Yes</button>\r\n            <button onClick={goBack}>No</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logout;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\CreateUser.js",[],[],"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\handleUser\\ActuallyLogin.js",["124"],[],"import {React, useState} from \"react\";\r\nimport Axios from 'axios';\r\n\r\n\r\nconst NOT_LOGGED_IN = 1;\r\nconst LOGIN_FAIL = 2;\r\nconst LOGIN_SUCCES = 3;\r\n\r\n/**\r\n * @param props.setToken used for setting token received at login \r\n * @param props.setUserId used for setting user id received at login \r\n * @returns page for logging in user. Use it so it doesn't show after login succeeded. \r\n */\r\nconst ActuallyLogin = (props) => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loginStatus, setLoginStatus] = useState(NOT_LOGGED_IN);\r\n\r\n    const loginUser = async() => {\r\n        console.log(\"frontend logging in user: \" + username + \", \" + password);\r\n\r\n        Axios.post(\"http://localhost:3001/verify-user\", {\r\n            userName: username, \r\n            password: password \r\n        }).then((response) => {\r\n            if (response.status == 200) {\r\n                props.setToken({token: response.data});\r\n                setLoginStatus(LOGIN_SUCCES);\r\n            } else {\r\n                setLoginStatus(LOGIN_FAIL);\r\n            }           \r\n        }).catch((err) => {\r\n            setLoginStatus(LOGIN_FAIL);\r\n            console.log(\"verify user error: \" + err);\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        loginUser();\r\n    }\r\n\r\n    return(\r\n        <div className=\"login-wrapper\">\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    <p>Username</p>\r\n                    <input type=\"text\" onChange={e => setUsername(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    <p>Password</p>\r\n                    <input type=\"password\" onChange={e => setPassword(e.target.value)} />\r\n                </label>\r\n                <div>\r\n                    <button type=\"submit\">Log in</button>\r\n                </div>\r\n            </form>\r\n\r\n            {\r\n                \r\n                loginStatus === LOGIN_FAIL ?\r\n                        <h2>Login failed</h2>\r\n                    :\r\n                <></>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActuallyLogin;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\PlaylistCreate.js",["125"],[],"import {React, useContext, useState} from 'react';\r\nimport { UserContext } from '../../context';\r\nimport Globals from '../../globals/Globals.css'\r\nimport Axios from 'axios';\r\n\r\nconst SUCCESS = 0;\r\nconst FAIL = 1;\r\nconst UNKNOWN = 2;\r\n\r\nconst PlaylistCreate = () => {\r\n\r\n  const userContext = useContext(UserContext);\r\n  const userId = userContext.userId;\r\n\r\n  const [playlist, setPlaylist] = useState();\r\n  const [status, setStatus] = useState(UNKNOWN);\r\n\r\n  /**\r\n   * Adds playlists\r\n   */\r\n  const addPlaylist = async() => {\r\n\r\n    //notice backticks ` \r\n    const postUrl = `http://localhost:3001/library/${userId}/create-playlist`;\r\n\r\n    Axios.post(postUrl, {\r\n            playlistName: playlist\r\n        }).then((response) => {\r\n            if (response.status === 200) {      //200 = OK, anything else indicates error\r\n                setStatus(SUCCESS);\r\n            } else {\r\n                setStatus(FAIL);\r\n            }\r\n        }).catch((err) => {\r\n            setStatus(FAIL);\r\n        });\r\n\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addPlaylist();\r\n  }\r\n\r\n  return (\r\n    <div className=\"margin-top\">\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n        <label>\r\n          <p>Playlist name</p>\r\n          <input required type=\"text\" onChange={e => setPlaylist(e.target.value)} />\r\n        </label>\r\n        <div>\r\n            <button type=\"submit\">Add playlist</button>\r\n        </div>\r\n      </form>\r\n      {\r\n        status === SUCCESS ?\r\n          <h2>Playlist added!</h2> \r\n          :\r\n          status === FAIL ?\r\n            <h2>Error, playlist could not be added</h2>\r\n            :\r\n          <></>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlaylistCreate;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\Library.js",["126","127","128","129"],[],"import { React, useState, useEffect, useContext } from 'react';\r\nimport { UserContext } from \"../../context\";\r\nimport usePages from '../usePages';\r\nimport Axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCirclePlus } from '@fortawesome/free-solid-svg-icons'\r\nimport Globals from '../../globals/Globals.css';\r\nimport ListedPlaylist from '../../components/common/ListedPlaylist'\r\n\r\n/**\r\n * @returns library of given owner\r\n */\r\nconst Library = () => {\r\n\r\n    const userContext = useContext(UserContext);\r\n    const currUser = userContext.userId;\r\n\r\n    //owner of library\r\n    const currUrl = new URL(window.location.href);\r\n    const userId = currUrl.searchParams.get('user-id');\r\n\r\n    const pagesHelp= usePages();\r\n    const pages = pagesHelp.pages;\r\n\r\n    const [username, setUsername] = useState();\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const isOwned = (currUser == userId);\r\n\r\n\r\n    /**\r\n     * Fetches playlists after render \r\n     */\r\n     useEffect(()=> {\r\n        //notice backticks ` \r\n        const getURL = `http://localhost:3001/library/${userId}`;\r\n        \r\n        Axios.get(getURL).then((response) => {\r\n            console.log(\"libr response: \" + JSON.stringify(response.data));\r\n            setPlaylists(response.data);\r\n        }).catch((err) => console.log(\"get playlists error: \" + err));\r\n    }, []);\r\n\r\n    /**\r\n     * Might set loading to false (if data has been fetched), after render\r\n     */\r\n    useEffect(() => {\r\n        if (playlists !== null && playlists !== undefined) {\r\n        setLoading(false);\r\n    }\r\n    }, [playlists]);\r\n\r\n\r\n    /**\r\n     * Sets username\r\n     */\r\n     useEffect(() => {\r\n        Axios.get(`http://localhost:3001/get-username/${userId}`).then((response) => {\r\n        setUsername(response.data[0].username);\r\n        }).catch((err) => console.log(\"get username error: \" + err))\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className='library-outmost margin-top'>\r\n            <h4>{username}'s library</h4>\r\n            {console.log(\"returning my library\")}\r\n            {\r\n                isLoading ? \r\n                        <h2>Loading...</h2>\r\n                    :   \r\n                        playlists.map((playlist, index) => (\r\n                            <ListedPlaylist playlist={playlist} key={index}></ListedPlaylist>\r\n                        ))\r\n            }\r\n     \r\n            {\r\n                isOwned ? \r\n                    <a href={pagesHelp.getURL(pages.addplaylist)}>\r\n                        <FontAwesomeIcon icon={faCirclePlus} size='4x' className='icon add-button'/>\r\n                    </a>\r\n                :\r\n                    <></>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Library;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\explore\\SearchUser.js",["130","131"],[],"import {React, useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport Globals from '../../globals/Globals.css'\r\nimport ListedUser from '../../components/common/ListedUser';\r\n\r\nconst ERROR = 1;\r\n\r\nconst SearchUser = (props) => {\r\n\r\n    //all users, set once at page load\r\n    const [allUsers, setAllUsers] = useState([]);\r\n\r\n    //users to be displayed when searching\r\n    const [displayUsers, setDisplayUsers] = useState([]);\r\n    \r\n    const [status, setStatus] = useState();\r\n\r\n    /**\r\n     * Search for users and set users to display. \r\n     */\r\n    const searchUsers = (str) => {\r\n        let users = allUsers;\r\n        const searchStr = str.toLowerCase();\r\n\r\n        if (searchStr === '') {\r\n            setDisplayUsers([]);\r\n            return;\r\n        }\r\n\r\n        users = users.filter(user => {\r\n            const username = user.username.toLowerCase();\r\n            if (username.includes(searchStr)) {\r\n                return true;\r\n            }\r\n        })\r\n\r\n        setDisplayUsers(users);\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch all users\r\n     */\r\n    useEffect(() => {\r\n        Axios.get(\"http://localhost:3001/get-users\")\r\n        .then((response) => {\r\n            setAllUsers(response.data);\r\n        }).catch((err) => {\r\n            setStatus(ERROR);\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className='margin-top'>\r\n            <input placeholder='Search users' onChange={(e) => searchUsers(e.target.value)}/>\r\n            {\r\n                displayUsers.map((user, index) => (\r\n                    <ListedUser user={user} key={index}/>\r\n                ))\r\n            }\r\n            {\r\n                status === ERROR ? \r\n                        <h2>Error: users could not be retrieved</h2>\r\n                    :   \r\n                        <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchUser;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\explore\\NearMe.js",["132","133","134","135","136","137","138"],[],"import {React, useState, useEffect, useContext} from 'react';\r\nimport { UserContext } from '../../context';\r\nimport Axios from 'axios';\r\nimport Globals from '../../globals/Globals.css';\r\nimport ListedSongPlace from '../../components/common/ListedSongplace';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCirclePlay, faCirclePause } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst FAIL = 1;\r\nconst PLAYING = 4;\r\nconst PAUSED = 5;\r\nconst UNSUPPORTED = 6;\r\nconst NONALLOWED = 7;\r\n\r\n\r\n\r\nconst NearMe = () => {\r\n\r\n    const userContext = useContext(UserContext);\r\n    const userId = userContext.userId;\r\n\r\n    //used to make page render\r\n    const [updSwitch, setUpdSwitch] = useState(false);\r\n\r\n    //used to store/set user position\r\n    const [lat, setLat] = useState();\r\n    const [long, setLong] = useState();\r\n\r\n    //play, paused, or failed\r\n    const [play, setPlay] = useState(PAUSED);\r\n\r\n    //the songplaces that are retrieved once\r\n    var songplaces = null;\r\n\r\n    //the songplaces to display, sorted by proximity\r\n    const [displaySongplaces, setDisplaySongplaces] = useState([]);\r\n\r\n\r\n  \r\n    /**\r\n     * Toggling play has the effect of making songplaces order by location \r\n     */\r\n      useEffect(()=> {\r\n        console.log(\"useEffect of toggling play\")\r\n        autoPlay();\r\n    }, [play]);\r\n\r\n\r\n    \r\n    /**\r\n     * Calculate distance between two points a and b of lat and long. \r\n     * Taken from: https://www.movable-type.co.uk/scripts/latlong.html\r\n     * @param aLat point a latitude\r\n     * @param aLong point a longitude\r\n     * @param bLat point b latitude\r\n     * @param bLong point b longitude\r\n     * @returns distance between given points\r\n     */\r\n    const calcDistance = (lat1, lon1, lat2, lon2) => {\r\n\r\n        const R = 6371e3; // metres\r\n        const φ1 = lat1 * Math.PI/180; // φ, λ in radians\r\n        const φ2 = lat2 * Math.PI/180;\r\n        const Δφ = (lat2-lat1) * Math.PI/180;\r\n        const Δλ = (lon2-lon1) * Math.PI/180;\r\n\r\n        const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\r\n                Math.cos(φ1) * Math.cos(φ2) *\r\n                Math.sin(Δλ/2) * Math.sin(Δλ/2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n\r\n        const distance = R * c; // in metres\r\n\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * @returns a promise with songplaces\r\n     */\r\n     const getSongplaces = async() => {\r\n        return new Promise((res, rej) => {\r\n            if (songplaces != null) {\r\n                res(songplaces);\r\n            }\r\n    \r\n            Axios.get(\"http://localhost:3001/get-songplaces\").then((response) => {\r\n                if (response.status != 200) {\r\n                    console.log(\"get songplaces failed, response: \" + response);\r\n                    res(null);\r\n                }   \r\n                songplaces = response.data;\r\n                res(response.data);\r\n            }).catch((err) => {\r\n                res(null);\r\n            });\r\n        });\r\n    }\r\n\r\n    const handleGeolocationFail = (error) => {\r\n        if (error.code == error.PERMISSION_DENIED) {\r\n            setPlay(NONALLOWED);\r\n        } else {\r\n            setPlay(FAIL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets users current position and then calls function to order songplaces by position\r\n     */\r\n    const getUserPosition = () => {\r\n        console.log(\"getting user pos\");\r\n        if (!navigator.geolocation) {\r\n            console.log(\"setting play to UNSUPPORTED\")\r\n            setPlay(UNSUPPORTED);\r\n            return new Promise();\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(orderByPosition, handleGeolocationFail);\r\n    }\r\n\r\n\r\n    /**\r\n     * Orders songplaces by proximity to given position \r\n     * @param position GeoLocationPosition (from navigator.geolocation.getCurrentPosition)\r\n     */\r\n     const orderByPosition = (position) => {\r\n        const lat = position.coords.latitude;\r\n        const long = position.coords.longitude;\r\n\r\n        setLat(lat);\r\n        setLong(long);\r\n\r\n        console.log(\"ordering by current position\");\r\n\r\n        getSongplaces().then((sps) => {\r\n            if (sps == null) {\r\n                setPlay(FAIL);\r\n                return;\r\n            }\r\n\r\n            sps.sort(function(songplaceA, songplaceB) {\r\n                let aDistance = calcDistance(songplaceA.latitude, songplaceA.longitude, lat, long);\r\n                let bDistance = calcDistance(songplaceB.latitude, songplaceB.longitude, lat, long);\r\n                return aDistance - bDistance;\r\n            });\r\n\r\n            setDisplaySongplaces(sps);\r\n        }).catch((err) => setPlay(FAIL));\r\n    }\r\n\r\n    /**\r\n     * Plays (sorts songplaces) while autoplay is on. \r\n     * \r\n     * Gets user position. \r\n     */\r\n    const autoPlay = () => {\r\n        if (play === UNSUPPORTED || play === FAIL) {\r\n            console.log(\"cannot autoplay\")\r\n            return;\r\n        }\r\n\r\n        getUserPosition();  //function calls function to order songplaces\r\n        \r\n        if (PLAYING) {\r\n            setTimeout(autoPlay, 20000);  //20 seconds\r\n        }\r\n    }\r\n\r\n    const tryAgain = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    const toggleAutoPlay = () => {\r\n        if (play === PLAYING) {\r\n            setPlay(PAUSED);\r\n        } else {\r\n            setPlay(PLAYING);\r\n        }\r\n    }\r\n\r\n    if (play === NONALLOWED){\r\n        return (\r\n            <div className=\"margin-top\">\r\n                <h2>Location access must be allowed in browser</h2>\r\n                <button onClick={() => tryAgain()}> Try again </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (play === UNSUPPORTED) {\r\n        return (\r\n            <div className=\"margin-top\">\r\n                <h2>Browser does not support location</h2>\r\n            </div>\r\n        )\r\n    } \r\n\r\n    if (play === FAIL) {\r\n        return (\r\n            <div className=\"margin-top\">\r\n                <h2>Sorry, could not get music by location.</h2>\r\n                <button onClick={() => tryAgain()}> Try again </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"margin-top\">\r\n            {\r\n                play === PLAYING ? \r\n                        <div>\r\n                            <h5>Playing music from: (  {lat}, {long} )</h5>\r\n                            <button onClick={() => toggleAutoPlay()}>\r\n                                <FontAwesomeIcon icon={faCirclePause} size='2x'/>\r\n                            </button>\r\n                        </div>\r\n                    :\r\n                        <div>\r\n                            <h5>Play local music</h5>\r\n                            <button onClick={() => toggleAutoPlay()}>\r\n                                <FontAwesomeIcon icon={faCirclePlay} size='2x'/>\r\n                            </button>\r\n                        </div>\r\n                    \r\n            }\r\n            <hr/>\r\n             {\r\n                play === PLAYING ?\r\n                        displaySongplaces.map((songplace, index) => (\r\n                            <ListedSongPlace songplace={songplace} key={index} isOwned={false} playlistId={-1}/>\r\n                        ))\r\n                    :\r\n                        <h5>Press play to get songplaces from nearby</h5>\r\n             }         \r\n        </div>\r\n    )\r\n    \r\n\r\n    \r\n}\r\n\r\nexport default NearMe;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\SongplaceCreate.js",["139","140","141"],[],"import { React, useContext, useState } from \"react\";\r\nimport { UserContext } from \"../../context\";\r\nimport Globals from \"../../globals/Globals.css\";\r\nimport Axios from \"axios\";\r\n\r\nconst SUCCESS = 0;\r\nconst FAIL = 1;\r\nconst UNKNOWN = 2;\r\n\r\nconst SongPlaceCreate = () => {\r\n  \r\n  const userContext = useContext(UserContext);\r\n  const userId = userContext.userId;\r\n\r\n  const [song, setSong] = useState();\r\n  const [lat, setLatitude] = useState();\r\n  const [long, setLongitude] = useState();\r\n\r\n  //success of songplace posting\r\n  const [postStatus, setPostStatus] = useState(UNKNOWN);\r\n\r\n  //success of connecting songplace to playlist\r\n  const [connectStatus, setConnectStatus] = useState(UNKNOWN);\r\n\r\n  const currUrl = new URL(window.location.href);\r\n  const playlistId = currUrl.searchParams.get('playlist-id');\r\n  const playlistName = currUrl.searchParams.get('playlist-name');\r\n\r\n\r\n\r\n  /**\r\n   * Posts songplace and returns id.\r\n   * @returns id of songplace that was posted (will be null if posting failed)\r\n   */\r\n  const postSongPlace = async () => {\r\n    let songplacePosted = null;\r\n\r\n    console.log(\"posting songplace: \" + \r\n      \"\\nplaylistId = \" + playlistId +  \r\n      \"\\nuserId = \" + userId + \r\n      \"\\nsongplace = \" + song\r\n    );\r\n\r\n    //notice backticks ` \r\n    const postUrl = `http://localhost:3001/library/${userId}/${playlistId}/create-songplace`;\r\n\r\n    Axios.post(postUrl, {\r\n      songplaceName: song,\r\n      latitude: lat,\r\n      longitude: long,\r\n    })\r\n    .then((response) => {\r\n      //200 = OK, anything else indicates error\r\n      if (response.status === 200) {\r\n        setPostStatus(SUCCESS);\r\n      } else {\r\n        setPostStatus(FAIL);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      setPostStatus(FAIL);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Connects songplace that was posted to a playlis\r\n   * @param id id of songplace\r\n   */\r\n  const connectSongplaceToPlayList = async (songplaceId) => {};\r\n\r\n  /**\r\n   * Adds song\r\n   */\r\n  const addSongPlace = () => {\r\n    postSongPlace().then((id) => connectSongplaceToPlayList(id));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addSongPlace();\r\n  };\r\n\r\n  return (\r\n    <div className=\"margin-top\">\r\n      <h2>Add songplace to {playlistName}</h2>\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n        <label>\r\n          <p>Song</p>\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            onChange={(e) => setSong(e.target.value)}\r\n          />\r\n        </label>\r\n        <label>\r\n          <p>Latitude</p>\r\n          <input\r\n            required\r\n            type=\"number\"\r\n            min=\"-90\"\r\n            max=\"90\"\r\n            step=\"0.01\"\r\n            onChange={(e) => setLatitude(e.target.value)}\r\n          />\r\n        </label>\r\n        <label>\r\n          <p>Longitude</p>\r\n          <input\r\n            required\r\n            type=\"number\"\r\n            min=\"-180\"\r\n            max=\"180\"\r\n            step=\"0.01\"\r\n            onChange={(e) => setLongitude(e.target.value)}\r\n          />\r\n        </label>\r\n        <div>\r\n          <button type=\"submit\">Add songplace</button>\r\n        </div>\r\n      </form>\r\n      {\r\n        postStatus === SUCCESS ? \r\n            <h2>Songplace added!</h2>\r\n          : \r\n            postStatus === FAIL ? \r\n              <h2>Error, songplace could not be added</h2>\r\n            : \r\n              <></>\r\n      }\r\n      {\r\n        connectStatus === FAIL ? \r\n            <h2>Songplace could not be added to playlist {playlistName}</h2>\r\n        : \r\n            <></>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongPlaceCreate;\r\n","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\pages\\library\\Playlist.js",["142","143","144","145","146","147"],[],"import React, { useEffect, useContext, useState} from 'react';\r\nimport Axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCirclePlus } from '@fortawesome/free-solid-svg-icons'\r\nimport '../../globals/Globals.css';\r\nimport './Library.css';\r\nimport { UserContext } from '../../context';\r\nimport usePages from '../usePages';\r\nimport ListedSongPlace from '../../components/common/ListedSongplace';\r\nimport EditPlaylist from '../../components/common/EditPlaylist';\r\n\r\nconst Playlist = () => {\r\n\r\n    const pagesHelp = usePages();\r\n    const pages = pagesHelp.pages;\r\n    \r\n    const context = useContext(UserContext);\r\n    const userId = context.userId;\r\n\r\n    const currUrl = new URL(window.location.href);\r\n    const playlistId = currUrl.searchParams.get('playlist-id');\r\n    console.log('pl id: ' + playlistId);\r\n\r\n\r\n    const [songplaces, setSongplaces] = useState([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [plName, setPlaylistName] = useState('spellistenamn wihu');\r\n    const [showEdit, setShowEdit] = useState(false);\r\n\r\n    const [isOwned, setIsOwned] = useState(false);\r\n\r\n   \r\n    const getSongPlaces = () => {\r\n        //notice backticks ` \r\n        const getUrl = `http://localhost:3001/library/${userId}/${playlistId}/songplaces`; \r\n\r\n        Axios.get(getUrl)\r\n        .then((response) => {\r\n            setSongplaces(response.data);\r\n        }).catch((err) => {\r\n            console.log('get songplaces error');\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Deletes playlist (and songplaces in it). On success goes back to library. \r\n     */\r\n    const deletePlaylist = () => {\r\n        //notice backticks ` \r\n        const deleteUrl = `http://localhost:3001/library/${userId}/delete-playlist/${playlistId}`; \r\n\r\n        Axios.delete(deleteUrl).then((response) => {\r\n            if (!response.status == 200) {\r\n                console.log('playlist could not be deleted, status = ' + response.status);\r\n            } else {\r\n                window.history.go(-1);\r\n            }\r\n        }).catch((err) => {\r\n            console.log('playlist could not be deleted');\r\n        });\r\n    }\r\n \r\n    const handleDeleteClick = () => {\r\n        if (window.confirm('Delete playlist?')) {\r\n            deletePlaylist();\r\n        }\r\n    }\r\n\r\n    const getAddClickLocation = () => {\r\n        let url = pagesHelp.getURL(pages.addsongplace);\r\n        url.searchParams.set('playlist-id', playlistId);\r\n        url.searchParams.set('playlist-name', plName);\r\n        return url;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets loading to false if data has been fetched\r\n     */\r\n     useEffect(() => {\r\n        if (songplaces !== null && songplaces !== undefined) {\r\n            setLoading(false);\r\n        }\r\n    }, [songplaces]);\r\n\r\n\r\n    /**\r\n     * Fetches songplaces in playlist after render\r\n     */\r\n    useEffect(()=> {\r\n        getSongPlaces();\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * Sets playlist name and if playlist is owned\r\n     */\r\n     useEffect(()=> {\r\n        Axios.get(`http://localhost:3001/get-playlist/${playlistId}`).then((response) => {\r\n            if (response.status == 200) {\r\n                console.log(\"get name data: \" + JSON.stringify(response.data[0].name));\r\n                setPlaylistName(response.data[0].name);\r\n                setIsOwned(response.data[0].user_id == userId);\r\n                console.log(JSON.stringify(response));\r\n                console.log(\"userId = \" + userId + \", user_id = \" + response.data[0].user_id);\r\n                console.log(\"setting is owned to \" + (response.data[0].user_id == userId));\r\n            } else {\r\n                console.log(\"get playlist name error: \");\r\n            }\r\n        }).catch((err) => console.log(\"get playlist name error: \" + err));\r\n    }, []);\r\n\r\n\r\n    //todo: differentiate between no song-places and no data fetched\r\n    return ( \r\n        <div className='library-outmost margin-top'>\r\n            <h2>{plName}</h2>\r\n            {\r\n\r\n            isLoading ? \r\n                    <h2>Loading...</h2>\r\n                :\r\n                songplaces.map((songplace, index) => (\r\n                    <ListedSongPlace songplace={songplace} key={index} playlistId={playlistId} isOwned={isOwned}></ListedSongPlace>\r\n                ))\r\n            }\r\n            {\r\n                isOwned ? \r\n                        <>\r\n                             <a href={getAddClickLocation()}>  \r\n                                <FontAwesomeIcon icon={faCirclePlus} size='4x' className='icon add-button'/>\r\n                            </a>\r\n                            <button onClick={() => handleDeleteClick()}>Delete playlist</button>\r\n                            <button onClick={() => setShowEdit(!showEdit)}>Edit playlist name</button>\r\n                            <EditPlaylist show={showEdit} playlistId={playlistId} playlistName={plName} setPlaylistName={setPlaylistName}/>\r\n                        </>\r\n                    :\r\n                        <></>\r\n\r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Playlist;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\ListedUser.js",["148","149","150"],[],"import {React, useState, useContext} from 'react';\r\nimport Axios from 'axios';\r\nimport Globals from '../../globals/Globals.css'\r\nimport { UserContext } from '../../context';\r\nimport usePages from '../../pages/usePages';\r\n\r\n/**\r\n * @param {*} user object\r\n * @returns item to represent a user in a list\r\n */\r\nconst ListedUser = (props) => {\r\n\r\n    const user = props.user;\r\n    const context = useContext(UserContext);\r\n    const currUserId = context.userId;\r\n\r\n    const isCurrentUser = (currUserId === user.id);\r\n\r\n    const pagesHelp = usePages();\r\n    const pages = pagesHelp.pages;\r\n\r\n    const openUser = (userId) => {\r\n        console.log(\"opening user \" + userId);\r\n        let url = pagesHelp.getURL(pages.searchedLibrary);\r\n        url.searchParams.set('user-id', userId);\r\n        window.location.href = url;\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => openUser(user.id)}>\r\n            <hr/>\r\n            <h2>\r\n                {user.username}\r\n            </h2>\r\n            {\r\n                isCurrentUser ?\r\n                        <h5>(you)</h5>\r\n                    :\r\n                        <></>\r\n            }\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListedUser;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\ListedPlaylist.js",[],[],"C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\ListedSongplace.js",["151","152","153"],[],"import {React, useState, useContext} from 'react';\r\nimport Axios from 'axios';\r\nimport Globals from '../../globals/Globals.css'\r\nimport { UserContext } from '../../context';\r\n\r\n/**\r\n * @param {*} songPlace object\r\n * @returns item to represent a songplace in a list\r\n */\r\nconst ListedSongPlace = (props) => {\r\n\r\n    const songplace = props.songplace;\r\n    const playlistId = props.playlistId;\r\n    const isOwned = props.isOwned;\r\n\r\n    const context = useContext(UserContext);\r\n    const userId = context.userId;\r\n \r\n    const deleteSongplace = () => {\r\n\r\n         //notice backticks ` \r\n        const deleteUrl = `http://localhost:3001/library/${userId}/${playlistId}/${songplace.id}/delete-songplace`;\r\n\r\n        Axios.delete(deleteUrl).then((response) => {\r\n            console.log(\"songplace delete status: \" + response.status);\r\n            if (response.status == 200) {\r\n                window.location.reload(true);\r\n            }\r\n        }).catch((err) => {\r\n            console.log(\"delete songplace error\")\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            <h5>\r\n                {songplace.name} ({songplace.latitude}, {songplace.longitude})\r\n            </h5>\r\n            {\r\n                isOwned ?\r\n                        <button onClick={() => deleteSongplace()}> Delete </button>\r\n                    :\r\n                        <></>\r\n            }\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListedSongPlace;","C:\\Users\\mmick\\Documents\\eget\\songplacer\\SongPlacer\\frontend\\src\\components\\common\\EditPlaylist.js",[],[],{"ruleId":"154","severity":1,"message":"155","line":55,"column":6,"nodeType":"156","endLine":55,"endColumn":8,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":40,"column":36,"nodeType":"160","messageId":"161","endLine":40,"endColumn":38,"suppressions":"162"},{"ruleId":"163","severity":1,"message":"164","line":10,"column":10,"nodeType":"165","messageId":"166","endLine":10,"endColumn":18},{"ruleId":"163","severity":1,"message":"167","line":35,"column":19,"nodeType":"165","messageId":"166","endLine":35,"endColumn":27},{"ruleId":"163","severity":1,"message":"168","line":36,"column":23,"nodeType":"165","messageId":"166","endLine":36,"endColumn":35},{"ruleId":"163","severity":1,"message":"169","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":15},{"ruleId":"163","severity":1,"message":"170","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":16},{"ruleId":"163","severity":1,"message":"171","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":13},{"ruleId":"163","severity":1,"message":"169","line":1,"column":8,"nodeType":"165","messageId":"166","endLine":1,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":27,"column":33,"nodeType":"160","messageId":"161","endLine":27,"endColumn":35},{"ruleId":"163","severity":1,"message":"169","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":15},{"ruleId":"163","severity":1,"message":"169","line":7,"column":8,"nodeType":"165","messageId":"166","endLine":7,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":28,"column":31,"nodeType":"160","messageId":"161","endLine":28,"endColumn":33},{"ruleId":"154","severity":1,"message":"172","line":42,"column":8,"nodeType":"156","endLine":42,"endColumn":10,"suggestions":"173"},{"ruleId":"154","severity":1,"message":"172","line":61,"column":8,"nodeType":"156","endLine":61,"endColumn":10,"suggestions":"174"},{"ruleId":"163","severity":1,"message":"169","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":15},{"ruleId":"175","severity":1,"message":"176","line":30,"column":35,"nodeType":"177","messageId":"178","endLine":30,"endColumn":37},{"ruleId":"163","severity":1,"message":"169","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":15},{"ruleId":"163","severity":1,"message":"179","line":20,"column":11,"nodeType":"165","messageId":"166","endLine":20,"endColumn":17},{"ruleId":"163","severity":1,"message":"180","line":23,"column":12,"nodeType":"165","messageId":"166","endLine":23,"endColumn":21},{"ruleId":"163","severity":1,"message":"181","line":23,"column":23,"nodeType":"165","messageId":"166","endLine":23,"endColumn":35},{"ruleId":"154","severity":1,"message":"182","line":46,"column":8,"nodeType":"156","endLine":46,"endColumn":14,"suggestions":"183"},{"ruleId":"158","severity":1,"message":"184","line":87,"column":37,"nodeType":"160","messageId":"161","endLine":87,"endColumn":39},{"ruleId":"158","severity":1,"message":"159","line":100,"column":24,"nodeType":"160","messageId":"161","endLine":100,"endColumn":26},{"ruleId":"163","severity":1,"message":"169","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":15},{"ruleId":"163","severity":1,"message":"185","line":23,"column":25,"nodeType":"165","messageId":"166","endLine":23,"endColumn":41},{"ruleId":"163","severity":1,"message":"186","line":36,"column":9,"nodeType":"165","messageId":"166","endLine":36,"endColumn":24},{"ruleId":"158","severity":1,"message":"159","line":54,"column":34,"nodeType":"160","messageId":"161","endLine":54,"endColumn":36},{"ruleId":"154","severity":1,"message":"187","line":93,"column":8,"nodeType":"156","endLine":93,"endColumn":10,"suggestions":"188"},{"ruleId":"158","severity":1,"message":"159","line":101,"column":33,"nodeType":"160","messageId":"161","endLine":101,"endColumn":35},{"ruleId":"158","severity":1,"message":"159","line":104,"column":53,"nodeType":"160","messageId":"161","endLine":104,"endColumn":55},{"ruleId":"158","severity":1,"message":"159","line":107,"column":80,"nodeType":"160","messageId":"161","endLine":107,"endColumn":82},{"ruleId":"154","severity":1,"message":"189","line":112,"column":8,"nodeType":"156","endLine":112,"endColumn":10,"suggestions":"190"},{"ruleId":"163","severity":1,"message":"164","line":1,"column":16,"nodeType":"165","messageId":"166","endLine":1,"endColumn":24},{"ruleId":"163","severity":1,"message":"171","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":13},{"ruleId":"163","severity":1,"message":"169","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":15},{"ruleId":"163","severity":1,"message":"164","line":1,"column":16,"nodeType":"165","messageId":"166","endLine":1,"endColumn":24},{"ruleId":"163","severity":1,"message":"169","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":26,"column":33,"nodeType":"160","messageId":"161","endLine":26,"endColumn":35},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getElements'. Either include it or remove the dependency array.","ArrayExpression",["191"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["192"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setDepth' is assigned a value but never used.","'setPageTitle' is assigned a value but never used.","'Globals' is defined but never used.","'usePages' is defined but never used.","'Axios' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["193"],["194"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'userId' is assigned a value but never used.","'updSwitch' is assigned a value but never used.","'setUpdSwitch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'autoPlay'. Either include it or remove the dependency array.",["195"],"Expected '!==' and instead saw '!='.","'setConnectStatus' is assigned a value but never used.","'songplacePosted' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSongPlaces'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has missing dependencies: 'playlistId' and 'userId'. Either include them or remove the dependency array.",["197"],{"desc":"198","fix":"199"},{"kind":"200","justification":"201"},{"desc":"202","fix":"203"},{"desc":"202","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [getElements]",{"range":"211","text":"212"},"directive","","Update the dependencies array to be: [userId]",{"range":"213","text":"214"},{"range":"215","text":"214"},"Update the dependencies array to be: [autoPlay, play]",{"range":"216","text":"217"},"Update the dependencies array to be: [getSongPlaces]",{"range":"218","text":"219"},"Update the dependencies array to be: [playlistId, userId]",{"range":"220","text":"221"},[1312,1314],"[getElements]",[1440,1442],"[userId]",[1966,1968],[1332,1338],"[autoPlay, play]",[2910,2912],"[getSongPlaces]",[3783,3785],"[playlistId, userId]"]